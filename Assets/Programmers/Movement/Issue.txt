Need to set movement in the movement script

/*
using UnityEngine;

public class movement : MonoBehaviour
{
    //Camera 
    public float mouseSensitivity = 2f;     //mouse sensitivity
    private float verticalRotation = 0f;
    private Transform cameraTransform;  

    //Player movement
    private Rigidbody rb;
    public float movespeed = 4f;    //speed of player
    public float sprintSpeed = 8f; 
    private float moveHorizontal;   //horizontal movement input
    private float moveForward;      //forward movement input

    //Player jump
    public float jumpForce = 10f;       
    bool isGrounded = true;     //checks whether player is on ground or not
    public LayerMask groundLayer;   //layer to identify ground
    private float groundCheckTimer = 0f;            //time to check if player is on ground
    private float groundCheckDelay = 0.3f;      //delay between ground checks
    private float playerHeight;
    private float raycastDistance;      //distance to ground
    void Start()
    {
        //initialisation of rigidbody and camera
        rb = GetComponent<Rigidbody>();
        rb.freezeRotation = true;
        cameraTransform = Camera.main.transform;

        //calculates players height and distance to ground for ground check
        playerHeight = GetComponent<CapsuleCollider>().height * transform.localScale.y;
        raycastDistance = (playerHeight / 2) + 0.2f;

        //locks and hides cursor
        Cursor.lockState = CursorLockMode.Locked;
        Cursor.visible = false;
    }
    
    void Update()
    {
        //movement input
        moveHorizontal = Input.GetAxisRaw("Horizontal");
        moveForward = Input.GetAxisRaw("Vertical");

        //handles camera rotation
        CameraRotation();

        //jump input
        if (Input.GetButtonDown("Jump") && isGrounded)
        {
            Jump();
        }
        
        //ground checks
        if (!isGrounded && groundCheckTimer <= 0f)
        {
            Vector3 rayOrigin = transform.position + Vector3.up * 0.1f;
            bool groundDetected = Physics.Raycast(rayOrigin, Vector3.down, raycastDistance, groundLayer);

            //slightly forward and downward raycast
            Vector3 forwardRayOrigin = transform.position + Vector3.up * 0.1f + transform.forward * 0.1f;
            bool forwardGroundDetected = Physics.Raycast(forwardRayOrigin, Vector3.down, raycastDistance, groundLayer);

            isGrounded = groundDetected || forwardGroundDetected;

            if (isGrounded)
            {
                Debug.Log("Player is grounded!");
            }
            else
            {  
                Debug.Log("Player is not on the ground!");
            }          
        }
        else
        {
            groundCheckTimer -= Time.deltaTime;   
        }
    }

    void FixedUpdate()
    {
        Movement();     //player movement
    }

    void Movement()
    {
        //movement direction an target velocity
        Vector3 movement = (transform.right * moveHorizontal + transform.forward * moveForward).normalized;

            // Check for walls in the direction of movement
        if (moveForward != 0)
        {
            Vector3 rayOrigin = transform.position + Vector3.up * 0.1f;
            if (Physics.Raycast(rayOrigin, transform.forward, 1f, groundLayer))
            {
                Debug.Log("Wall detected in front, stopping forward movement.");
                movement.x = 0;
            }
        }

        float currentSpeed = Input.GetKey(KeyCode.LeftShift) ? sprintSpeed : movespeed;
        Vector3 targetVelocity = movement * currentSpeed;

        //applies movement to player
        Vector3 velocity = rb.velocity;
        velocity.x = targetVelocity.x;
        velocity.z = targetVelocity.z;
        rb.velocity = velocity;

        //stops player if no input is given
        if (isGrounded && moveHorizontal == 0 && moveForward == 0)
        {
            rb.velocity = new Vector3 (0,rb.velocity.y,0);
        }

        //tracking speed
        float speed = new Vector3(rb.velocity.x, 0, rb.velocity.z).magnitude;
        //Debug.Log("Current Speed: " + speed);            
    }

    void Jump()
    {
        //ground state and reset ground check timer
        isGrounded = false;
        groundCheckTimer = groundCheckDelay;
        rb.velocity = new Vector3(rb.velocity.x, jumpForce, rb.velocity.z);
    }

    void CameraRotation()
    {
        float horizontalRotation = Input.GetAxis("Mouse X") * mouseSensitivity;
        //  Checks
        if (horizontalRotation != 0)
        {
            Debug.Log("Player is moving the camera horizontally.");
        }
        
        transform.Rotate (0,horizontalRotation,0);

        verticalRotation -= Input.GetAxis("Mouse Y") * mouseSensitivity;
        verticalRotation = Mathf.Clamp(verticalRotation,-90,90);

        cameraTransform.localRotation = Quaternion.Euler(verticalRotation,0,0);
    }
}
*/